#!/usr/bin/env python2
import csv
import sys

sys.path.append("..")
import utils

def main():
    """
    Postanalysis of the austronesian.log file generated by BEAST when the
    Austronesian analysis is run.  This will compute the ranking of meaning
    classes by posterior mean mutation rate.
    """

    print("Computing posterior mean paramter estimates...")
    ranked_means = utils.write_means("austronesian.log", "parameter_means.csv")
    print("Generating LaTeX tables...")
    make_tables(ranked_means)

def load_wals_feature_names():
    """
    Build a dictionary mapping WALS feature IDs to feature names.
    """
    fp = open("language.csv","r")
    reader = csv.DictReader(fp)
    fn = reader.fieldnames
    features = [f for f in fn if f[0].isdigit()]
    features = [f.split(" ",1) for f in features]
    return dict(features)

def make_tables(ranked_means):
    """
    Generate a LaTeX table of fastest and slowest WALS features and save it
    in the file table.tex for inclusion in the manuscript.
    """
    nice = load_wals_feature_names()
    nice_ranked_means = [(r, \
            nice[n.split(":")[-1]]) for (r,n) in ranked_means]
    top_10 = nice_ranked_means[0:10]
    bottom_10 = nice_ranked_means[-10:]

    fp = open("table.tex", "w")
    fp.write("""\\begin{tabular}{|l|c|}
	\\hline
	Feature & Rate  \\\\ \hline
	\multicolumn{2}{|c|}{Slowest} \\\\ \\hline\n""")
    for (rate, name) in top_10:
        fp.write("%s & %.2f \\\\\n" % (name, rate))
    fp.write("\\hline\n""")
    fp.write("\\multicolumn{2}{|c|}{Fastest} \\\\ \\hline\n""")
    for (rate, name) in bottom_10:
        fp.write("%s & %.2f \\\\\n" % (name, rate))
    fp.write("\\hline\n""")
    fp.write("\\end{tabular}\n")
    
    fp = open("supp_feature_table.tex", "w")
    fp.write("""\\begin{tabular}{|c|p{0.75\linewidth}|}
	\\hline
	WALS feature ID & WALS feature Name  \\\\ \hline \n""")
    f_ids = [f_id.split(":")[-1] for (rate, f_id) in ranked_means]
    f_ids.sort(key = lambda x: int(x[:-1]))
    for f_id in f_ids:
        name = nice[f_id]
        fp.write("%s & %s \\\\\n" % (f_id, name))
    fp.write("\\hline\n""")
    fp.write("\\end{tabular}\n")
    
if __name__ == "__main__":
    main()
